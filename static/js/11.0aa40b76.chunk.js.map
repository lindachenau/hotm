{"version":3,"sources":["components/MyCalendar.js","components/Event.js","pages/Calendar.js"],"names":["DragAndDropCalendar","withDragAndDrop","Calendar","components","month","event","className","moment","start","format","end","total","artistNames","day","address","client","name","phone","serviceItems","map","item","MyCalendar","style","height","width","margin","popup","localizer","this","props","events","resizable","onDragStart","console","log","views","defaultView","Views","MONTH","defaultDate","Date","scrollToTime","messages","previous","next","showMore","noEventsInRange","React","Component","momentLocalizer","withRouter","Fragment","Container","maxWidth","padding"],"mappings":"2QAQMA,EAAsBC,IAAgBC,KAGtCC,EAAa,CACjBC,MAAO,CAACC,MCLH,YAAiC,IAAVA,EAAS,EAATA,MAC5B,OACE,yBAAKC,UAAU,mBACb,8BAAQC,IAAOF,EAAMG,OAAOC,OAAO,MAAQ,WAAQF,IAAOF,EAAMK,KAAKD,OAAO,MAAQ,KACpF,kBAAC,IAAD,MACA,8BAAQJ,EAAMM,MAAQ,KACtB,8BAAQN,EAAMO,gBDAlBC,IAAK,CAACR,MCKD,YAA+B,IAAVA,EAAS,EAATA,MAC1B,OACE,yBAAKC,UAAU,mBACb,oCACE,kBAAC,IAAD,MAAiB,8BAAQD,EAAMS,UAEjC,oCACE,kBAAC,IAAD,MACA,8BAAQT,EAAMU,OAAOC,KAAO,KAC5B,kBAAC,IAAD,MACA,8BAAQX,EAAMU,OAAOE,MAAQ,MAE/B,oCACE,kBAAC,IAAD,MACA,8BAAQZ,EAAMM,MAAQ,KACtB,8BAAQN,EAAMO,aACbP,EAAMa,aAAaC,KAAK,SAAAC,GAAI,OAAI,6BAAOA,WD6EjCC,E,iLAnCX,OACE,kBAACrB,EAAD,CACEsB,MAAO,CAACC,OAAQ,OAAQC,MAAO,OAAQC,OAAQ,QAE/CC,OAAO,EACPC,UAAWC,KAAKC,MAAMF,UACtBG,OAAQF,KAAKC,MAAMC,OACnB3B,WAAYA,EAEZ4B,WAAS,EAGTC,YAAaC,QAAQC,IACrBC,MAAO,CAAC,QAAS,OACjBC,YAAaC,IAAMC,MACnBC,YAAa,IAAIC,KACjBC,aAAc,IAAID,KAAK,KAAM,EAAG,EAAG,GACnCE,SAAU,CACRtC,MAAO,kBAAC,IAAD,MACPS,IAAK,kBAAC,IAAD,MACL8B,SAAU,kBAAC,IAAD,MACVC,KAAM,kBAAC,IAAD,MACNC,SAAU,SAAAlC,GAAK,OACb,+CACOA,EADP,KAEE,kBAAC,IAAD,QAGJmC,gBAAiB,8C,GAxFFC,IAAMC,W,yBEPzBrB,EAAYsB,YAAgB1C,KAgBnB2C,uBAdE,SAACrB,GAEhB,OACE,kBAAC,IAAMsB,SAAP,KACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAK/B,MAAO,CAACgC,QAAS,KACxC,kBAAC,EAAD,CACExB,OAAQD,EAAMC,OACdH,UAAWA","file":"static/js/11.0aa40b76.chunk.js","sourcesContent":["import React from 'react'\nimport { MonthEvent, DayEvent } from './Event'\nimport { Calendar, Views } from 'react-big-calendar'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\"\nimport { FaCalendarAlt, FaCalendarDay, FaChevronLeft, FaChevronRight } from \"react-icons/fa\"\nimport { GoTasklist } from \"react-icons/go\"\n\nconst DragAndDropCalendar = withDragAndDrop(Calendar)\n\n\nconst components = {\n  month: {event: MonthEvent},\n  day: {event: DayEvent}\n}\n\nclass MyCalendar extends React.Component {\n\n  // moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\n  //   const { events } = this.state\n\n  //   const idx = events.indexOf(event)\n  //   let allDay = event.allDay\n\n  //   if (!event.allDay && droppedOnAllDaySlot) {\n  //     allDay = true\n  //   } else if (event.allDay && !droppedOnAllDaySlot) {\n  //     allDay = false\n  //   }\n\n  //   const updatedEvent = { ...event, start, end, allDay }\n\n  //   const nextEvents = [...events]\n  //   nextEvents.splice(idx, 1, updatedEvent)\n\n  //   this.setState({ events: nextEvents })\n\n  //   // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  // }\n\n  // resizeEvent = ({ event, start, end }) => {\n  //   const { events } = this.state\n\n  //   const nextEvents = events.map(existingEvent => {\n  //     return existingEvent.id === event.id\n  //       ? { ...existingEvent, start, end }\n  //       : existingEvent\n  //   })\n\n  //   this.setState({ events: nextEvents })\n\n  //   //alert(`${event.title} was resized to ${start}-${end}`)\n  // }\n\n  // newEvent = ({ start, end }) => {\n    \n  //   const title = window.prompt('New Event name')\n  //   if (title)\n  //   {\n  //     let num_es = this.state.numEvents + 1\n  //     this.setState({\n  //       events: [\n  //         ...this.state.events,\n  //         {\n  //           id: num_es,\n  //           start,\n  //           end,\n  //           title,\n  //         },\n  //       ],\n  //       numEvents: num_es\n  //     })\n  //   }\n  // }\n\n  render() {\n    return (\n      <DragAndDropCalendar\n        style={{height: '95vh', width: '100%', margin: 'auto'}}\n        // selectable\n        popup={true}\n        localizer={this.props.localizer}\n        events={this.props.events}\n        components={components}\n        // onEventDrop={this.moveEvent}\n        resizable\n        // onEventResize={this.resizeEvent}\n        // onSelectSlot={this.newEvent}\n        onDragStart={console.log}\n        views={['month', 'day']}\n        defaultView={Views.MONTH}\n        defaultDate={new Date()}\n        scrollToTime={new Date(2019, 1, 1, 6)}\n        messages={{\n          month: <FaCalendarAlt />, \n          day: <FaCalendarDay />,\n          previous: <FaChevronLeft />,\n          next: <FaChevronRight />,\n          showMore: total => (\n            <>\n              {`+${total} `}\n              <GoTasklist />\n            </>\n          ),\n          noEventsInRange: 'There are no bookings in this range.'\n        }}\n      />\n    )\n  }\n}\n\nexport default MyCalendar","import React from 'react'\nimport moment from 'moment'\nimport { FaUserAlt, FaMapMarkerAlt, FaPhoneSquare, FaDollarSign } from \"react-icons/fa\"\n/**\n * \n * event display for Month view in mobile devices \n */\nexport function MonthEvent ({ event }) {\n  return (\n    <div className='rbc-event-label'>\n      <span>{ moment(event.start).format('LT') + ' â€“ ' + moment(event.end).format('LT') + ' ' }</span>\n      <FaDollarSign/>\n      <span>{ event.total + ' '}</span>\n      <span>{ event.artistNames}</span>\n    </div>\n  )\n}\n\nexport function DayEvent ({ event }) {\n  return (\n    <div className='rbc-event-label'>\n      <>\n        <FaMapMarkerAlt/><span>{ event.address }</span>\n      </>\n      <>\n        <FaUserAlt/> \n        <span>{ event.client.name + ' ' }</span> \n        <FaPhoneSquare/>\n        <span>{ event.client.phone + ' ' }</span>\n      </>\n      <>\n        <FaDollarSign/>\n        <span>{ event.total + ' '}</span>\n        <span>{ event.artistNames}</span>\n        {event.serviceItems.map( item => <div>{ item }</div> )}\n      </> \n    </div>\n  )\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport MyCalendar from '../components/MyCalendar'\nimport 'react-big-calendar/lib/sass/styles.scss'\nimport '../components/CalendarToolbar.css'\nimport { momentLocalizer } from 'react-big-calendar'\nimport moment from 'moment'\nimport Container from '@material-ui/core/Container'\n\nconst localizer = momentLocalizer(moment)\n\nconst Calendar = (props) => {\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"xl\" style={{padding: 10}}>\n        <MyCalendar\n          events={props.events}\n          localizer={localizer} \n        />\n      </Container>\n    </React.Fragment>\n  )\n}\n\nexport default withRouter(Calendar)\n"],"sourceRoot":""}